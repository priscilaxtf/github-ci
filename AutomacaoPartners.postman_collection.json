{
	"info": {
		"_postman_id": "68c6b911-b05c-4d59-80b0-eef4b83a8171",
		"name": "API_Schedulings",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26077753",
		"_collection_link": "https://planetary-comet-5673.postman.co/workspace/The-Originals---Academy-API~f5d84a9c-dbf0-4200-9ba2-3adbd07e78a9/collection/26077753-68c6b911-b05c-4d59-80b0-eef4b83a8171?action=share&source=collection_link&creator=26077753"
	},
	"item": [
		{
			"name": "Login Sysadmin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = pm.response.json();\r",
							"var token = responseJson.token;\r",
							"pm.environment.set(\"token_sysadmin\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"mail\": \"sysadmin@qacoders.com\",\r\n    \"password\": \"1234@Test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Register",
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token_sysadmin}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fullName\": \"The Originals Squad\",\r\n    \"mail\": \"qacoders_theoriginals@academy.com\",\r\n    \"password\": \"QaCoders@123\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": 12485698522,\r\n    \"confirmPassword\": \"QaCoders@123\",\r\n    \"audit\": \r\n    [\r\n        {\r\n            \"idCompany\": \"Qa-Coders\",\r\n            \"loginUser\": \"Test-1234\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/user/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = pm.response.json();\r",
							"var tokenLogin = responseJson.token;\r",
							"pm.environment.set(\"token\", tokenLogin);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token_sysadmin}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"mail\": \"qacoders_theoriginals@academy.com\",\r\n    \"password\": \"QaCoders@123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Scheduling - sucess",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"//Gera data atual com o acréscimo de 10 minutos\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"//Gera data final\r",
							"const dataFinal = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFinal + 604800\r",
							"pm.environment.set(\"scheduleEndDate\",endDate)\r",
							"\r",
							"// Retorna URL que gera imagens randômicas\r",
							"var imageURL = \"https://picsum.photos/200/300\";\r",
							"pm.environment.set(\"scheduleImageURL\", imageURL)\r",
							"\r",
							"// Gera um e-mail aleatório\r",
							"pm.environment.set(\"loginUser\", \r",
							"pm.variables.replaceIn('{{$randomEmail}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var responseJson = pm.response.json();\r",
							"var postId = responseJson._id;\r",
							"pm.environment.set(\"id\", postId);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "nameFormScheduling -  cannot be null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Cria uma variável com valor null e o armazena na variável de ambiente \"nameFormScheduling\"\r",
							"var nameFormSchedulingNull = null;\r",
							"    console.log(pm.environment.set(\"nameFormScheduling\", nameFormSchedulingNull));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O campo nome do agendamento é obrigatório.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O campo nome do agendamento é obrigatório.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": {{nameFormScheduling}},\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "nameFormScheduling - cannot be empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Cria uma variável com valor vazio e o armazena na variável de ambiente \"nameFormScheduling\"\r",
							"var nameFormSchedulingEmpty = \"\";\r",
							"    console.log(pm.environment.set(\"nameFormScheduling\", nameFormSchedulingEmpty));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O campo nome do agendamento é obrigatório.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O campo nome do agendamento é obrigatório.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "nameFormScheduling - value cannot be different from string",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera um valor numérico inteiro aleatório e o armazena na variável de ambiente \"nameFormScheduling\"\r",
							"pm.environment.set(\"nameFormScheduling\", \r",
							"pm.variables.replaceIn('{{$randomInt}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O nome do agendamento deve ser do tipo string.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O nome do agendamento deve ser do tipo string.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": {{nameFormScheduling}},\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "nameFormScheduling - value cannot be more than 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento QA\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - Turma \" + getRandomIntInclusive() + \" - \" + \"Projeto Qa.Coders - Academy\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O nome do agendamento deve ter no máximo 50 caracteres.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O nome do agendamento deve ter no máximo 50 caracteres.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleStartDate - cannot be empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"// Cria uma variável com valor vazio e o armazena na variável de ambiente \"scheduleStartDate\"\r",
							"var nameFormSchedulingEmpty = \"\";\r",
							"    console.log(pm.environment.set(\"scheduleStartDate\", nameFormSchedulingEmpty));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O campo data inicial é obrigatório'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O campo data inicial é obrigatório.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": \"{{scheduleStartDate}}\",\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleStartDate - cannot be null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"// Cria uma variável com valor null e o armazena na variável de ambiente \"scheduleStartDate\"\r",
							"var nameFormSchedulingNull = null;\r",
							"    console.log(pm.environment.set(\"scheduleStartDate\", nameFormSchedulingNull));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O campo data inicial é obrigatório'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O campo data inicial é obrigatório.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleStartDate - value cannot be a number less than 0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"//Gera um número aleatório negativo\r",
							"function getRandomIntCharacters(min, max) {\r",
							"  min = Math.ceil(0);\r",
							"  max = Math.floor(-20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"scheduleStartDate\", getRandomIntCharacters())"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'Não foi possível salvar este agendamento com uma data inicial anterior à data de hoje'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"Não foi possível salvar este agendamento com uma data inicial anterior à data de hoje\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleStartDate - value must not be less than 15 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"//Gera um número aleatório com mais de 15 caracteres\r",
							"function getRandomIntCharacters(min, max) {\r",
							"  min = Math.ceil(1111111111111111);\r",
							"  max = Math.floor(9999999999999999);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"pm.environment.set(\"scheduleStartDate\", getRandomIntCharacters())"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O valor da data inicial deve ter no máximo 15 caracteres.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O valor da data inicial deve ter no máximo 15 caracteres.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleStartDate - cannot be less than the current date",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"//Gera data do dia anterior\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual - 86400\r",
							"pm.environment.set(\"scheduleStartDate\", startDate)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'Não foi possível salvar este agendamento com uma data inicial anterior à data de hoje'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"Não foi possível salvar este agendamento com uma data inicial anterior à data de hoje\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleEndDate - cannot be null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"//Gera data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"// Cria uma variável com valor null e o armazena na variável de ambiente \"scheduleEndDate\"\r",
							"var nameFormSchedulingNull = null;\r",
							"    console.log(pm.environment.set(\"scheduleEndDate\", nameFormSchedulingNull));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O campo data final é obrigatório.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O campo data final é obrigatório.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleEndDate - cannot be empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"// Gera data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"// Cria uma variável com valor vazio e o armazena na variável de ambiente \"scheduleEndDate\"\r",
							"var nameFormSchedulingEmpty = \"\";\r",
							"pm.environment.set(\"scheduleEndDate\", nameFormSchedulingEmpty);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O campo data final é obrigatório.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O campo data final é obrigatório.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": \"\",\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleEndDate - value cannot be a number less than 0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"//Gera data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"//Gera um número aleatório negativo\r",
							"function getRandomIntCharacters(min, max) {\r",
							"  min = Math.ceil(0);\r",
							"  max = Math.floor(-20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"scheduleEndDate\", getRandomIntCharacters())"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'Não foi possível salvar este agendamento com uma data final anterior à data inicial'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"Não foi possível salvar este agendamento com uma data final anterior à data inicial\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleEndDate - value must not be less than 15 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"//Gera data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"//Gera um número aleatório com mais de 15 caracteres\r",
							"function getRandomIntCharacters(min, max) {\r",
							"  min = Math.ceil(1111111111111111);\r",
							"  max = Math.floor(9999999999999999);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"scheduleEndDate\", getRandomIntCharacters())"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O valor da data final deve ter no máximo 15 caracteres.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O valor da data final deve ter no máximo 15 caracteres.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleEndDate - cannot be less than the current date",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"//Gera data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"//Gera data atual como data final\r",
							"const dataFinal = Math.floor(Date.now() / 1000);\r",
							"pm.environment.set(\"scheduleEndDate\", dataFinal)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'Não foi possível salvar este agendamento com uma data final anterior à data inicial'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"Não foi possível salvar este agendamento com uma data final anterior à data inicial\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleImageURL - cannot be null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - Qa.Coders Academy\")\r",
							"\r",
							"//Gera data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"//Gera data final\r",
							"const dataFinal = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFinal + 86400\r",
							"pm.environment.set(\"scheduleEndDate\",endDate)\r",
							"\r",
							"// Cria uma variável com valor null e o armazena na variável de ambiente \"scheduleImageURL\"\r",
							"var nameFormSchedulingNull = null;\r",
							"    console.log(pm.environment.set(\"scheduleImageURL\", nameFormSchedulingNull));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O campo URL da imagem é obrigatório.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O campo URL da imagem é obrigatório.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": {{scheduleImageURL}},\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleImageURL - cannot be empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function nameFormScheduling_projeto () {\r",
							"    var nameFormScheduling_projeto = [\"Qa.Coders\", \"Qa.Coders Academy\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling_projeto[Math.floor(Math.random() * nameFormScheduling_projeto.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - \" + nameFormScheduling_projeto())\r",
							"\r",
							"//Gera data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"//Gera data final\r",
							"const dataFinal = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFinal + 86400\r",
							"pm.environment.set(\"scheduleEndDate\",endDate)\r",
							"\r",
							"// Cria uma variável com valor vazio e o armazena na variável de ambiente \"scheduleImageURL\"\r",
							"var nameFormSchedulingEmpty = \"\";\r",
							"    console.log(pm.environment.set(\"scheduleImageURL\", nameFormSchedulingEmpty));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'O campo URL da imagem é obrigatório.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"O campo URL da imagem é obrigatório.\")\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleImageURL - value cannot be different from string",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function nameFormScheduling_projeto () {\r",
							"    var nameFormScheduling_projeto = [\"Qa.Coders\", \"Qa.Coders Academy\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling_projeto[Math.floor(Math.random() * nameFormScheduling_projeto.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - \" + nameFormScheduling_projeto())\r",
							"\r",
							"//Gera data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"//Gera data final\r",
							"const dataFinal = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFinal + 86400\r",
							"pm.environment.set(\"scheduleEndDate\",endDate)\r",
							"\r",
							"// Gera um valor numérico inteiro aleatório e o armazena na variável de ambiente \"scheduleImageURL\"\r",
							"pm.environment.set(\"scheduleImageURL\", \r",
							"pm.variables.replaceIn('{{$randomInt}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'A URL da imagem deve ser do tipo string.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"A URL da imagem deve ser do tipo string.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": {{scheduleImageURL}},\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "scheduleImageURL - value must not be less than 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera o nome do agendamento\r",
							"function nameFormScheduling () {\r",
							"    var nameFormScheduling = [\"Abertura de inscrições\", \"Evento importante\", \"Live de apresentação\", \"Semana do RH\", \"Treinamento\", \"Live de divulgação\", \"Depoimento dos alunos\", \"Apresentação parceiros\", \"Oportunidade estágio\", \"Oportunidade trainne\", \"Voluntariado\", \"Treinamento Postman\", \"Treinamento Azure\", \"Treinamento MongoDB\", \"Treinamento SQL\", \"Entrega de certificados\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling[Math.floor(Math.random() * nameFormScheduling.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function nameFormScheduling_projeto () {\r",
							"    var nameFormScheduling_projeto = [\"Qa.Coders\", \"Qa.Coders Academy\"];\r",
							"\r",
							"    var randomItem = nameFormScheduling_projeto[Math.floor(Math.random() * nameFormScheduling_projeto.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  min = Math.ceil(1);\r",
							"  max = Math.floor(20);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"nameFormScheduling\",nameFormScheduling() + \" - T\" + getRandomIntInclusive() + \" - \" + nameFormScheduling_projeto())\r",
							"\r",
							"//Gera data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600\r",
							"pm.environment.set(\"scheduleStartDate\",startDate)\r",
							"\r",
							"//Gera data final\r",
							"const dataFinal = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFinal + 86400\r",
							"pm.environment.set(\"scheduleEndDate\",endDate)\r",
							"\r",
							"// Retorna URL com mais de 50 caracteres\r",
							"var imageURL = \"https://s3.amazonaws.com/uifaces/faces/twitter/johnsmithagency/128.jpg\";\r",
							"pm.environment.set(\"scheduleImageURL\", imageURL)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Aba tests\r",
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400  \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Alert is: 'A URL da imagem deve ter no máximo 50 caracteres.'\", function () {\r",
							"  const { error } = pm.response.json()\r",
							"  pm.expect(error[0]).to.equal(\"A URL da imagem deve ter no máximo 50 caracteres.\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Successful automatic testing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"//Campo data inicial \r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"//Campo data final \r",
							"const dataFutura = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFutura + 86400;\r",
							"pm.environment.set(\"scheduleEndDate\", endDate)\r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - nameFormScheduling can not be null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//O campo nome do evento é obrigatório\r",
							" var nameFormSchedulingNull = null\r",
							"    pm.environment.set(\"nameFormSchedulingNull\", nameFormSchedulingNull);\r",
							"\r",
							"    \r",
							"// Campo scheduleImageURL\r",
							"//const imagem = \"https://picsum.photos/200/300\"; \r",
							"//pm.environment.set(\"scheduleImageURL\", imagem )\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O campo nome do agendamento é obrigatório.\");\r",
							"    });\r",
							"\r",
							"//O campo imagem é obrigatório\r",
							"\r",
							"//pm.environment.set(\"scheduleImageURL\", pm.variables.replaceIn('{{$randomAvatarImage}}'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": {{nameFormSchedulingNull}},\r\n    \"scheduleStartDate\": \"{{scheduleStartDate}}\",\r\n    \"scheduleEndDate\": \"{{scheduleEndDate}}\",\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - nameFormScheduling can not be empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"\r",
							"//O campo nome do evento não pode ser vazio\r",
							" var nameFormSchedulingEmpty = \"\"\r",
							"    pm.environment.set(\"nameFormSchedulingEmpty\", nameFormSchedulingEmpty);\r",
							"\r",
							"    \r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O campo nome do agendamento é obrigatório.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormSchedulingEmpty}}\",\r\n    \"scheduleStartDate\": \"{{scheduleStartDate}}\",\r\n    \"scheduleEndDate\": \"{{scheduleEndDate}}\",\r\n    \"scheduleImageURL\": \"{{scheduleImageUR}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - nameFormScheduling must be a maximum of 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Parâmetro 'nameFormScheduling' inválido: deve ter no máximo 50 caracteres\r",
							"\r",
							"pm.environment.set(\"nameFormSchedulingbigger\", pm.variables.replaceIn('{{$randomLoremParagraph}}'));\r",
							"\r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O nome do agendamento deve ter no máximo 50 caracteres.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormSchedulingbigger}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - nameFormScheduling can be a string",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"// Nome evento deve ser uma string\r",
							"pm.environment.set(\"nameFormSchedulingValue\", pm.variables.replaceIn('{{$randomInt}}'));\r",
							"\r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O nome do agendamento deve ser do tipo string.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": {{nameFormSchedulingValue}},\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleStartDate can not be null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"\r",
							"//O campo data inicial é obrigatório\r",
							"var nscheduleStartDateNull = null\r",
							"    pm.environment.set(\"scheduleStartDatenull\",nscheduleStartDateNull);\r",
							"\r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O campo data inicial é obrigatório.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDatenull}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleStarDate can not be empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							" pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"    //O campo data inicial é obrigatório\r",
							"  var scheduleStartDateEmpty = \"\"\r",
							"    pm.environment.set(\"scheduleStartDateEmpty\",scheduleStartDateEmpty); \r",
							"\r",
							"    \r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O campo data inicial é obrigatório.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": \"{{scheduleStartDateEmpty}}\",\r\n    \"scheduleEndDate\": \"{{scheduleEndDate}}\",\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\",\r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleStarDate can be a number greater than 0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"\r",
							"//O campo data inicial não pode ser menor que 0\r",
							"function getRandomIntCharacters (min, max) {\r",
							"min = Math.ceil (0);\r",
							"max = Math.floor (-20);\r",
							"return Math.floor(Math.random() * (max - min + 1)) +  min;\r",
							"}\r",
							"pm.environment.set (\"scheduleStartDate\", getRandomIntCharacters()); \r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"Não foi possível salvar este agendamento com uma data inicial anterior à data de hoje\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleStarDate can not be  before today's date",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//O campo nome do evento\r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"\r",
							"//O campo data inicial não pode ser inferior a data atual\r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + (-86400);\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"Não foi possível salvar este agendamento com uma data inicial anterior à data de hoje\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleStarDate can be a maximum of 15 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"//O campo data inicial deve ter no máximo 15 caracteres\r",
							"function getRandomIntCharacters(min, max) {\r",
							"  min = Math.ceil(1111111111111111);\r",
							"  max = Math.floor(9999999999999999);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"pm.environment.set(\"scheduleStartDate\", getRandomIntCharacters());\r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O valor da data inicial deve ter no máximo 15 caracteres.\",\r",
							"        \"Não foi possível salvar este agendamento com uma data final anterior à data inicial\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleEndDate can not be less than zero",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"//Campo data inicial \r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"\r",
							"//O campo data final não pode ser menor que 0\r",
							"function getRandomIntCharacters (min, max) {\r",
							"min = Math.ceil (0);\r",
							"max = Math.floor (-20);\r",
							"return Math.floor(Math.random() * (max - min + 1)) +  min;\r",
							"}\r",
							"pm.environment.set (\"scheduleEndDate\", getRandomIntCharacters()); \r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"Não foi possível salvar este agendamento com uma data final anterior à data inicial\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleEndDate can be a maximum of 15 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"//Campo data inicial \r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"//O campo data final não deve ser maior que 15 caracteres\r",
							"function getRandomIntCharacters(min, max) {\r",
							"  min = Math.ceil(1111111111111111);\r",
							"  max = Math.floor(9999999999999999);\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"pm.environment.set(\"scheduleEndDate\", getRandomIntCharacters());\r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O valor da data final deve ter no máximo 15 caracteres.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleEndDate end date cannot be earlier than start date",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"//Salva de forma aleatória a data inicial\r",
							"const dataInicial = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataInicial +   31556926;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"//Salva de forma aleatória a data final\r",
							"const dataFinal = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFinal + 86400;\r",
							"pm.environment.set(\"scheduleEndDate\", endDate)\r",
							"\r",
							"// Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"Não foi possível salvar este agendamento com uma data final anterior à data inicial\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleEndDate can not be null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//O campo nome do evento \r",
							" pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							" \r",
							" \r",
							"  //Campo data inicial \r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"//O campo data final não pode ser nulo\r",
							"var nscheduleEndDateNull = null\r",
							"    pm.environment.set(\"scheduleEndDatenull\",nscheduleEndDateNull);\r",
							"\r",
							"    // Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O campo data final é obrigatório.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDatenull}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleEndDate can not be empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento\r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"\r",
							"//Campo data inicial \r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"//O campo data final não pode ser vazio\r",
							"var scheduleEndDateEmpty = \"\"\r",
							"    pm.environment.set(\"scheduleEndDateEmpty\",scheduleEndDateEmpty);\r",
							"\r",
							"    // Campo scheduleImageURL\r",
							"const imagem = \"https://picsum.photos/200/300\"; \r",
							"pm.environment.set(\"scheduleImageURL\", imagem )\r",
							"\r",
							"\r",
							"  \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O campo data final é obrigatório.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": \"{{scheduleEndDateEmpty}}\",\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleImageURL can be a maximum of 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"\r",
							"//Campo data inicial \r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"//Campo data final \r",
							"const dataFutura = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFutura + 86400;\r",
							"pm.environment.set(\"scheduleEndDate\", endDate)\r",
							"\r",
							"// O campo scheduleImageURL não pode conter mais que 50 caracteres\r",
							"pm.environment.set(\"scheduleImageURL\", pm.variables.replaceIn('{{$randomImageDataUri}}'));\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"A URL da imagem deve ter no máximo 50 caracteres.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURL}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleImageURL can be a string",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"\r",
							"//Campo data inicial \r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"//Campo data final \r",
							"const dataFutura = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFutura + 86400;\r",
							"pm.environment.set(\"scheduleEndDate\", endDate)\r",
							"\r",
							"// O campo scheduleImageURL tem que ser uma string\r",
							"pm.environment.set(\"scheduleImageURL\", pm.variables.replaceIn('{{$randomInt}}'));\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"A URL da imagem deve ser do tipo string.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": {{scheduleImageURL}}, \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleImageURL can not be empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"\r",
							"//Campo data inicial \r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"//Campo data final\r",
							"const dataFutura = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFutura + 86400;\r",
							"pm.environment.set(\"scheduleEndDate\", endDate)\r",
							"\r",
							"// Campo scheduleImageURL não ser vazio\r",
							"var scheduleImageURLEmpty = \"\"\r",
							"    pm.environment.set(\"scheduleImageURLEmpty\",scheduleImageURLEmpty); \r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O campo URL da imagem é obrigatório.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": \"{{scheduleImageURLEmpty}}\", \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insuccessful automatic testing - scheduleImageURL can not be null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login User\r",
							"pm.environment.set(\"loginUser\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"\r",
							"//Campo nome do evento \r",
							"pm.environment.set(\"nameFormScheduling\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"\r",
							"\r",
							"//Campo data inicial \r",
							"const dataAtual = Math.floor(Date.now() / 1000);\r",
							"const startDate = dataAtual + 600;\r",
							"pm.environment.set(\"scheduleStartDate\", startDate);\r",
							"\r",
							"//Campo data final \r",
							"const dataFutura = Math.floor(Date.now() / 1000);\r",
							"const endDate = dataFutura + 86400;\r",
							"pm.environment.set(\"scheduleEndDate\", endDate)\r",
							"\r",
							"// o campo scheduleImageURL não pode ser nulo\r",
							"var scheduleImageURLNull = null\r",
							"    pm.environment.set(\"scheduleImageURLnull\",scheduleImageURLNull);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do Status Code para criação\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"correct message\", function () {\r",
							"    const { error } = pm.response.json()\r",
							"    pm.expect(error[0]).to.equal (\"O campo URL da imagem é obrigatório.\");\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameFormScheduling\": \"{{nameFormScheduling}}\",\r\n    \"scheduleStartDate\": {{scheduleStartDate}},\r\n    \"scheduleEndDate\": {{scheduleEndDate}},\r\n    \"scheduleImageURL\": {{scheduleImageURLnull}}, \r\n    \"audit\": [\r\n        {\r\n            \"loginUser\": \"{{loginUser}}\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Scheduling",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Scheduling",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/schedulings/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"schedulings",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}